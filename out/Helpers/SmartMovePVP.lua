-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local WrapperHelpers
local WrapperWoW
local ListScoredWowPlayer
System.import(function (out)
  WrapperHelpers = Wrapper.Helpers
  WrapperWoW = Wrapper.WoW
  ListScoredWowPlayer = System.List(WrapperHelpers.ScoredWowPlayer)
end)
System.namespace("Wrapper.Helpers", function (namespace)
  namespace.class("ScoredWowPlayer", function (namespace)
    return {
      Score = 0,
      __metadata__ = function (out)
        return {
          fields = {
            { "Player", 0x6, out.Wrapper.WoW.WoWPlayer },
            { "Score", 0x6, System.Single }
          },
          class = { 0x6 }
        }
      end
    }
  end)

  namespace.class("SmartMovePVP", function (namespace)
    local Pulse, GetBestUnit, __ctor__
    __ctor__ = function (this)
      this.Units = ListScoredWowPlayer()
    end
    Pulse = function (this)
      if GetTime() - this.LastUpdateTime < 5 then
        return
      end

      this.LastUpdateTime = GetTime()

      this.Units:Clear()

      local FriendlyScore = 4
      local HostileScore = 2

      local Role = GetSpecializationRole(GetSpecialization())

      if Role == "HEALER" then
        FriendlyScore = 5
        HostileScore = 2
      end


      local ValidUnits = Linq.Where(WrapperWoW.ObjectManager.GetAllPlayers(500), function (x)
        return x.GUID ~= WrapperWoW.ObjectManager.getInstance().Player.GUID and not x.Dead
      end)

      --Console.WriteLine("Smart Move Found " + ValidUnits.Count() + " Units");

      for _, unit in System.each(ValidUnits) do
        local score = 0

        local NumFriends = Linq.Count((Linq.Where(ValidUnits, function (x)
          return WrapperWoW.Vector3.Distance(x.Position, unit.Position) < 60 and x.Reaction > 4
        end)))

        local NumHostile = Linq.Count((Linq.Where(ValidUnits, function (x)
          return WrapperWoW.Vector3.Distance(x.Position, unit.Position) < 60 and x.Reaction < 4
        end)))

        score = 1000 + (NumFriends * FriendlyScore) + (NumHostile * HostileScore)

        if (NumHostile * HostileScore) > (NumFriends * FriendlyScore) * 1.5 then
          score = score - 1000
          -- No suicde plx.
        end

        --Console.WriteLine("Scored New Unit: " + unit.Name + " score: " + score);
        local default = WrapperHelpers.ScoredWowPlayer()
        default.Player = unit
        default.Score = score
        this.Units:Add(default)
      end
    end
    GetBestUnit = function (this)
      local default
      if Linq.Count(this.Units) > 0 then
        default = Linq.FirstOrDefault(Linq.OrderByDescending(this.Units, function (x)
          return x.Score
        end, nil, System.Single))
      else
        default = nil
      end
      return default
    end
    return {
      LastUpdateTime = 0,
      Pulse = Pulse,
      GetBestUnit = GetBestUnit,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "LastUpdateTime", 0x1, System.Double },
            { "Units", 0x6, System.List(out.Wrapper.Helpers.ScoredWowPlayer) }
          },
          methods = {
            { "GetBestUnit", 0x86, GetBestUnit, out.Wrapper.Helpers.ScoredWowPlayer },
            { "Pulse", 0x6, Pulse }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)
