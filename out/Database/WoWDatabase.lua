-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local ListInt32 = System.List(System.Int32)
local HashSetInt32 = System.HashSet(System.Int32)
local WrapperDatabase
local WrapperWoW
local ListNPCLocationInfo
local ListNodeLocationInfo
local DictInt32MapDataEntry
System.import(function (out)
  WrapperDatabase = Wrapper.Database
  WrapperWoW = Wrapper.WoW
  ListNPCLocationInfo = System.List(WrapperDatabase.NPCLocationInfo)
  ListNodeLocationInfo = System.List(WrapperDatabase.NodeLocationInfo)
  DictInt32MapDataEntry = System.Dictionary(System.Int32, WrapperDatabase.MapDataEntry)
end)
System.namespace("Wrapper.Database", function (namespace)
  namespace.class("WoWDatabase", function (namespace)
    local DirtyMapIds, IsSaveTaskRunning, getHasDirtyMaps, GetGridHash, InsertNpcIfRequired, HandlePersistance, InsertNodeIfRequired, EnsureSaveProcessIsRunning, 
    GetMapDatabase, GetClosestRepairNPC, GetClosestVendorNPC, GetAllHerbLocations, GetAllOreLocations, class, static
    static = function (this)
      this.Maps = DictInt32MapDataEntry()
      local default = HashSetInt32()
      default:Add(62822)
      default:Add(64515)
      default:Add(32642)
      default:Add(32641)
      default:Add(142668)
      default:Add(142666)
      this.BannedObjectIDs = default
      DirtyMapIds = ListInt32()
    end
    IsSaveTaskRunning = false
    getHasDirtyMaps = function ()
      return Linq.Count(DirtyMapIds) > 0
    end
    GetGridHash = function (Location)
      return WrapperWoW.Vector3.Floor(WrapperWoW.Vector3.Divide1(WrapperWoW.Vector3(Location.X, Location.Y, Location.Z), class.GRID_SIZE)):GetHashCode()
    end
    InsertNpcIfRequired = function (Unit)
      local MapId =  __LB__.GetMapId()
      local IsRepair =  __LB__.UnitHasNpcFlag(Unit.GUID, 4096 --[[ENpcFlags.Repair]])
      local IsVendor =  __LB__.UnitHasNpcFlag(Unit.GUID, 128 --[[ENpcFlags.Vendor]])
      local IsInnKeeper =  __LB__.UnitHasNpcFlag(Unit.GUID, 65536 --[[ENpcFlags.Innkeeper]])
      local IsFlightmaster =  __LB__.UnitHasNpcFlag(Unit.GUID, 8192 --[[ENpcFlags.FlightMaster]])
      local IsMailBox =  __LB__.UnitHasNpcFlag(Unit.GUID, 67108864 --[[ENpcFlags.Mailbox]])

      if (not IsRepair and not IsVendor and not IsInnKeeper and not IsFlightmaster) or __LB__.UnitTagHandler(GetUnitSpeed, Unit.GUID) > 1 or class.BannedObjectIDs:Contains(Unit.ObjectId) then
        return
      end

      local IsDirty = false
      local MapDatabase = GetMapDatabase(MapId)

      if IsRepair then
        if not Linq.Any(MapDatabase.Repair, function (x)
          return x.ObjectId == Unit.ObjectId and WrapperWoW.Vector3.Distance(Unit.Position, WrapperWoW.Vector3(x.X, x.Y, x.Z)) < class.GRID_SIZE
        end) then
          local UnitFaction
          local FactionGroupString = __LB__.UnitTagHandler(UnitFactionGroup, Unit.GUID)

          repeat
            local default = FactionGroupString
            if default == "Alliance" then
              UnitFaction = 3 --[[FactionID.Alliance]]
              break
            elseif default == "Horde" then
              UnitFaction = 2 --[[FactionID.Horde]]
              break
            else
              UnitFaction = 1 --[[FactionID.Neutral]]
              break
            end
          until 1

          local extern = WrapperDatabase.NPCLocationInfo()
          extern.X = Unit.Position.X
          extern.Y = Unit.Position.Y
          extern.Z = Unit.Position.Z
          extern.ObjectId = Unit.ObjectId
          extern.MapID = MapId
          extern.NodeType = 1 --[[NPCNodeType.Repair]]
          extern.Faction = UnitFaction
          extern.Name = Unit.Name
          MapDatabase.Repair:Add(extern)

          System.Console.WriteLine("[WoWDatabase] Found New Repair NPC: " .. System.toString(Unit.Name))
          IsDirty = true
        end
      elseif IsVendor then
        if not Linq.Any(MapDatabase.Vendors, function (x)
          return x.ObjectId == Unit.ObjectId and WrapperWoW.Vector3.Distance(Unit.Position, WrapperWoW.Vector3(x.X, x.Y, x.Z)) < class.GRID_SIZE
        end) then
          local UnitFaction
          local FactionGroupString = __LB__.UnitTagHandler(UnitFactionGroup, Unit.GUID)

          repeat
            local default = FactionGroupString
            if default == "Alliance" then
              UnitFaction = 3 --[[FactionID.Alliance]]
              break
            elseif default == "Horde" then
              UnitFaction = 2 --[[FactionID.Horde]]
              break
            else
              UnitFaction = 1 --[[FactionID.Neutral]]
              break
            end
          until 1

          local extern = WrapperDatabase.NPCLocationInfo()
          extern.X = Unit.Position.X
          extern.Y = Unit.Position.Y
          extern.Z = Unit.Position.Z
          extern.ObjectId = Unit.ObjectId
          extern.MapID = MapId
          extern.NodeType = 2 --[[NPCNodeType.Vendor]]
          extern.Faction = UnitFaction
          extern.Name = Unit.Name
          MapDatabase.Vendors:Add(extern)

          System.Console.WriteLine("[WoWDatabase] Found New Vendor NPC: " .. System.toString(Unit.Name))
          IsDirty = true
        end
      elseif IsInnKeeper then
        if not Linq.Any(MapDatabase.Vendors, function (x)
          return x.ObjectId == Unit.ObjectId and WrapperWoW.Vector3.Distance(Unit.Position, WrapperWoW.Vector3(x.X, x.Y, x.Z)) < class.GRID_SIZE
        end) then
          local UnitFaction
          local FactionGroupString = __LB__.UnitTagHandler(UnitFactionGroup, Unit.GUID)

          repeat
            local default = FactionGroupString
            if default == "Alliance" then
              UnitFaction = 3 --[[FactionID.Alliance]]
              break
            elseif default == "Horde" then
              UnitFaction = 2 --[[FactionID.Horde]]
              break
            else
              UnitFaction = 1 --[[FactionID.Neutral]]
              break
            end
          until 1

          local extern = WrapperDatabase.NPCLocationInfo()
          extern.X = Unit.Position.X
          extern.Y = Unit.Position.Y
          extern.Z = Unit.Position.Z
          extern.ObjectId = Unit.ObjectId
          extern.MapID = MapId
          extern.NodeType = 4 --[[NPCNodeType.InnKeeper]]
          extern.Faction = UnitFaction
          extern.Name = Unit.Name
          MapDatabase.Vendors:Add(extern)

          System.Console.WriteLine("[WoWDatabase] Found New Vendor NPC: " .. System.toString(Unit.Name))
          IsDirty = true
        elseif IsFlightmaster then
          if not Linq.Any(MapDatabase.Vendors, function (x)
            return x.ObjectId == Unit.ObjectId and WrapperWoW.Vector3.Distance(Unit.Position, WrapperWoW.Vector3(x.X, x.Y, x.Z)) < class.GRID_SIZE
          end) then
            local UnitFaction
            local FactionGroupString = __LB__.UnitTagHandler(UnitFactionGroup, Unit.GUID)

            repeat
              local default = FactionGroupString
              if default == "Alliance" then
                UnitFaction = 3 --[[FactionID.Alliance]]
                break
              elseif default == "Horde" then
                UnitFaction = 2 --[[FactionID.Horde]]
                break
              else
                UnitFaction = 1 --[[FactionID.Neutral]]
                break
              end
            until 1

            local extern = WrapperDatabase.NPCLocationInfo()
            extern.X = Unit.Position.X
            extern.Y = Unit.Position.Y
            extern.Z = Unit.Position.Z
            extern.ObjectId = Unit.ObjectId
            extern.MapID = MapId
            extern.NodeType = 3 --[[NPCNodeType.FlightMaster]]
            extern.Faction = UnitFaction
            extern.Name = Unit.Name
            MapDatabase.Vendors:Add(extern)

            System.Console.WriteLine("[WoWDatabase] Found New Vendor NPC: " .. System.toString(Unit.Name))
            IsDirty = true
          end
        elseif IsMailBox then
          if not Linq.Any(MapDatabase.Vendors, function (x)
            return x.ObjectId == Unit.ObjectId and WrapperWoW.Vector3.Distance(Unit.Position, WrapperWoW.Vector3(x.X, x.Y, x.Z)) < class.GRID_SIZE
          end) then
            local UnitFaction
            local FactionGroupString = __LB__.UnitTagHandler(UnitFactionGroup, Unit.GUID)

            repeat
              local default = FactionGroupString
              if default == "Alliance" then
                UnitFaction = 3 --[[FactionID.Alliance]]
                break
              elseif default == "Horde" then
                UnitFaction = 2 --[[FactionID.Horde]]
                break
              else
                UnitFaction = 1 --[[FactionID.Neutral]]
                break
              end
            until 1

            local extern = WrapperDatabase.NPCLocationInfo()
            extern.X = Unit.Position.X
            extern.Y = Unit.Position.Y
            extern.Z = Unit.Position.Z
            extern.ObjectId = Unit.ObjectId
            extern.MapID = MapId
            extern.NodeType = 5 --[[NPCNodeType.MailBox]]
            extern.Faction = UnitFaction
            extern.Name = Unit.Name
            MapDatabase.MailBoxes:Add(extern)

            System.Console.WriteLine("[WoWDatabase] Found New Vendor NPC: " .. System.toString(Unit.Name))
            IsDirty = true
          end
        end
      end
      if IsDirty and not DirtyMapIds:Contains(MapId) then
        DirtyMapIds:Add(MapId)
        EnsureSaveProcessIsRunning()
      end
    end
    HandlePersistance = function ()
      if not  __LB__.DirectoryExists(System.toString( __LB__.GetBaseDirectory()) .. "\\BroBot\\Database\\MapData\\") then
         __LB__.CreateDirectory(System.toString( __LB__.GetBaseDirectory()) .. "\\BroBot\\Database\\MapData\\")
      end

      for _, MapId in System.each(DirtyMapIds) do
        local Path = System.toString( __LB__.GetBaseDirectory()) .. "\\BroBot\\Database\\MapData\\" .. MapId .. ".db"
        local Data = GetMapDatabase(MapId)
         __LB__.WriteFile(Path, LibJSON.Serialize(Data), false)

        System.Console.WriteLine("[WoWDatabase] Persisted Changes to MapId: " .. MapId)
      end

      DirtyMapIds:Clear()
    end
    InsertNodeIfRequired = function (Unit)
      local MapId =  __LB__.GetMapId()
      local IsHerbOrOre = (Unit:getIsHerb() or Unit:getIsOre())

      if not IsHerbOrOre or class.BannedObjectIDs:Contains(Unit.ObjectId) then
        return
      end

      local IsDirty = false
      local MapDatabase = GetMapDatabase(MapId)

      if not Linq.Any(MapDatabase.Nodes, function (x)
        return x.ObjectId == Unit.ObjectId and WrapperWoW.Vector3.Distance(Unit.Position, WrapperWoW.Vector3(x.X, x.Y, x.Z)) < class.GRID_SIZE
      end) then
        local default = WrapperDatabase.NodeLocationInfo()
        default.X = Unit.Position.X
        default.Y = Unit.Position.Y
        default.Z = Unit.Position.Z
        default.ObjectId = Unit.ObjectId
        default.MapID = MapId
        default.NodeType = Unit:getIsHerb() and 2 --[[NodeType.Herb]] or 1 --[[NodeType.Ore]]
        default.Name = Unit.Name
        MapDatabase.Nodes:Add(default)

        System.Console.WriteLine("[WoWDatabase] Found New Harvest Node: " .. System.toString(Unit.Name))
        IsDirty = true
      end

      if IsDirty and not DirtyMapIds:Contains(MapId) then
        DirtyMapIds:Add(MapId)
        EnsureSaveProcessIsRunning()
      end
    end
    EnsureSaveProcessIsRunning = function ()
      if not IsSaveTaskRunning then
        IsSaveTaskRunning = true

        C_Timer.NewTicker(30, function ()
          HandlePersistance()
        end)
      end
    end
    GetMapDatabase = function (MapId)
      if not class.Maps:ContainsKey(MapId) then
        if not  __LB__.FileExists(System.toString( __LB__.GetBaseDirectory()) .. "\\BroBot\\Database\\MapData\\" .. MapId .. ".db") then
          local default = WrapperDatabase.MapDataEntry()
          default.Nodes = ListNodeLocationInfo()
          default.Vendors = ListNPCLocationInfo()
          default.Repair = ListNPCLocationInfo()
          class.Maps:AddKeyValue(MapId, default)
        else
          local Text =  __LB__.ReadFile(System.toString( __LB__.GetBaseDirectory()) .. "\\BroBot\\Database\\MapData\\" .. MapId .. ".db")
          local MapDataEntry = LibJSON.Deserialize(Text)
          local MapDataClass = WrapperDatabase.MapDataEntry()
          MapDataClass:RestoreFromJson(MapDataEntry)
          class.Maps:AddKeyValue(MapId, MapDataClass)
        end
      end

      return class.Maps:get(MapId)
    end
    GetClosestRepairNPC = function ()
      local MapDb = GetMapDatabase( __LB__.GetMapId())

      if Linq.Count(MapDb.Repair) > 0 then
        return Linq.FirstOrDefault(Linq.OrderBy(MapDb.Repair, function (x)
          return WrapperWoW.Vector3.Distance(WrapperWoW.ObjectManager.getInstance().Player.Position, WrapperWoW.Vector3(x.X, x.Y, x.Z))
        end, nil, System.Double))
      end

      return nil
    end
    GetClosestVendorNPC = function ()
      local MapDb = GetMapDatabase( __LB__.GetMapId())

      if Linq.Count(MapDb.Vendors) > 0 then
        return Linq.FirstOrDefault(Linq.OrderBy(MapDb.Vendors, function (x)
          return WrapperWoW.Vector3.Distance(WrapperWoW.ObjectManager.getInstance().Player.Position, WrapperWoW.Vector3(x.X, x.Y, x.Z))
        end, nil, System.Double))
      end

      return nil
    end
    GetAllHerbLocations = function ()
      local MapDb = GetMapDatabase( __LB__.GetMapId())
      local Herbs = Linq.ToList(Linq.Where(MapDb.Nodes, function (x)
        return x.NodeType == 2 --[[NodeType.Herb]]
      end))
      return Herbs
    end
    GetAllOreLocations = function ()
      local MapDb = GetMapDatabase( __LB__.GetMapId())
      local Herbs = Linq.ToList(Linq.Where(MapDb.Nodes, function (x)
        return x.NodeType == 1 --[[NodeType.Ore]]
      end))
      return Herbs
    end
    class = {
      GRID_SIZE = 20,
      getHasDirtyMaps = getHasDirtyMaps,
      GetGridHash = GetGridHash,
      InsertNpcIfRequired = InsertNpcIfRequired,
      HandlePersistance = HandlePersistance,
      InsertNodeIfRequired = InsertNodeIfRequired,
      GetMapDatabase = GetMapDatabase,
      GetClosestRepairNPC = GetClosestRepairNPC,
      GetClosestVendorNPC = GetClosestVendorNPC,
      GetAllHerbLocations = GetAllHerbLocations,
      GetAllOreLocations = GetAllOreLocations,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "BannedObjectIDs", 0xE, System.HashSet(System.Int32) },
            { "DirtyMapIds", 0x9, System.List(System.Int32) },
            { "GRID_SIZE", 0xE, System.Int32 },
            { "IsSaveTaskRunning", 0x9, System.Boolean },
            { "Maps", 0xE, System.Dictionary(System.Int32, out.Wrapper.Database.MapDataEntry) }
          },
          properties = {
            { "HasDirtyMaps", 0x20E, System.Boolean, getHasDirtyMaps }
          },
          methods = {
            { "EnsureSaveProcessIsRunning", 0x9, EnsureSaveProcessIsRunning },
            { "GetAllHerbLocations", 0x8E, GetAllHerbLocations, System.List(out.Wrapper.Database.NodeLocationInfo) },
            { "GetAllOreLocations", 0x8E, GetAllOreLocations, System.List(out.Wrapper.Database.NodeLocationInfo) },
            { "GetClosestRepairNPC", 0x8E, GetClosestRepairNPC, out.Wrapper.Database.NPCLocationInfo },
            { "GetClosestVendorNPC", 0x8E, GetClosestVendorNPC, out.Wrapper.Database.NPCLocationInfo },
            { "GetGridHash", 0x18E, GetGridHash, out.Wrapper.WoW.Vector3, System.Int32 },
            { "GetMapDatabase", 0x18E, GetMapDatabase, System.Int32, out.Wrapper.Database.MapDataEntry },
            { "HandlePersistance", 0xE, HandlePersistance },
            { "InsertNodeIfRequired", 0x10E, InsertNodeIfRequired, out.Wrapper.WoW.WoWGameObject },
            { "InsertNpcIfRequired", 0x10E, InsertNpcIfRequired, out.Wrapper.WoW.WoWUnit }
          },
          class = { 0x6 }
        }
      end
    }
    return class
  end)
end)
